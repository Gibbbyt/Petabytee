// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User models
model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  name            String?
  phone           String?          // Added phone field
  role            String           @default("CLIENT")
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  sessions        Session[]
  orders          Order[]
  pcConfigs       PCConfig[]
  ps5Configs      PS5Config[]
  repairs         Repair[]
  supportTickets  SupportTicket[]
  notifications   Notification[]
  reviews         Review[]
  forumPosts      ForumPost[]
  forumComments   ForumComment[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Product models
model Product {
  id              String            @id @default(cuid())
  name            String
  nameAl          String            // Albanian name
  description     String
  descriptionAl   String            // Albanian description
  category        String            // ProductCategory as String
  price           Float
  image           String?
  stock           Int               @default(0)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  orderItems      OrderItem[]
  pcComponents    PCComponent[]
  ps5Components   PS5Component[]
  reviews         Review[]
  buildComponents PCBuildComponent[]
}

// PC Configurator
model PCBuild {
  id              String            @id @default(cuid())
  name            String
  nameAl          String
  description     String
  descriptionAl   String
  basePrice       Float
  image           String?
  isActive        Boolean           @default(true)
  order           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  components      PCBuildComponent[]
  configs         PCConfig[]
}

model PCBuildComponent {
  id              String            @id @default(cuid())
  buildId         String
  componentType   String            // PCComponentType as String
  productId       String?
  isRequired      Boolean           @default(true)
  
  build           PCBuild           @relation(fields: [buildId], references: [id], onDelete: Cascade)
  product         Product?          @relation(fields: [productId], references: [id])
}

model PCComponent {
  id              String            @id @default(cuid())
  productId       String
  componentType   String            // PCComponentType as String
  specifications  String            // JSON as string for SQLite compatibility
  
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  configItems     PCConfigItem[]
}

model PCConfig {
  id              String            @id @default(cuid())
  userId          String?
  buildId         String?
  name            String
  totalPrice      Float
  status          String            @default("DRAFT")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User?             @relation(fields: [userId], references: [id])
  build           PCBuild?          @relation(fields: [buildId], references: [id])
  items           PCConfigItem[]
  order           Order?
}

model PCConfigItem {
  id              String            @id @default(cuid())
  configId        String
  componentId     String
  quantity        Int               @default(1)
  price           Float
  
  config          PCConfig          @relation(fields: [configId], references: [id], onDelete: Cascade)
  component       PCComponent       @relation(fields: [componentId], references: [id])
}

// PS5 Controller Configurator
model PS5Component {
  id              String            @id @default(cuid())
  productId       String
  componentType   String            // PS5ComponentType as String
  colorHex        String?
  
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  configItems     PS5ConfigItem[]
}

model PS5Config {
  id              String            @id @default(cuid())
  userId          String?
  name            String
  totalPrice      Float
  status          String            @default("DRAFT")
  previewImage    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User?             @relation(fields: [userId], references: [id])
  items           PS5ConfigItem[]
  order           Order?
}

model PS5ConfigItem {
  id              String            @id @default(cuid())
  configId        String
  componentId     String
  customColor     String?
  price           Float
  
  config          PS5Config         @relation(fields: [configId], references: [id], onDelete: Cascade)
  component       PS5Component      @relation(fields: [componentId], references: [id])
}

// Orders
model Order {
  id              String            @id @default(cuid())
  orderNumber     String            @unique
  userId          String
  status          String            @default("PENDING")
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  paymentMethod   String?
  shippingAddress String?           // JSON as string for SQLite compatibility
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  items           OrderItem[]
  pcConfig        PCConfig?         @relation(fields: [pcConfigId], references: [id])
  pcConfigId      String?           @unique
  ps5Config       PS5Config?        @relation(fields: [ps5ConfigId], references: [id])
  ps5ConfigId     String?           @unique
  timeline        Timeline[]
  invoice         Invoice?
}

model OrderItem {
  id              String            @id @default(cuid())
  orderId         String
  productId       String
  quantity        Int
  price           Float
  
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product           @relation(fields: [productId], references: [id])
}

// Repairs
model Repair {
  id              String            @id @default(cuid())
  repairNumber    String            @unique
  userId          String
  deviceType      String
  deviceModel     String
  issueDescription String
  status          String            @default("RECEIVED")
  estimatedCost   Float?
  finalCost       Float?
  isEasyMailIn    Boolean           @default(false)
  trackingNumber  String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  completedAt     DateTime?
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  timeline        Timeline[]
  invoice         Invoice?
}

// Support & Services
model SupportTicket {
  id              String            @id @default(cuid())
  ticketNumber    String            @unique
  userId          String
  subject         String
  description     String
  category        String            // SupportCategory as String
  priority        String            @default("MEDIUM")
  status          String            @default("OPEN")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  resolvedAt      DateTime?
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  messages        TicketMessage[]
}

model TicketMessage {
  id              String            @id @default(cuid())
  ticketId        String
  message         String
  isAdminReply    Boolean           @default(false)
  createdAt       DateTime          @default(now())
  
  ticket          SupportTicket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

// Timeline
model Timeline {
  id              String            @id @default(cuid())
  entityType      String            // TimelineEntity as String
  entityId        String
  title           String
  titleAl         String
  description     String
  descriptionAl   String
  icon            String?
  createdAt       DateTime          @default(now())
  
  // Relations
  order           Order?            @relation(fields: [entityId], references: [id])
  repair          Repair?           @relation(fields: [entityId], references: [id])
}

// Tags for blog posts (separate model instead of String[])
model BlogPostTag {
  id         String   @id @default(cuid())
  postId     String
  tag        String
  
  post       BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId, tag])
}

// Content Management
model BlogPost {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  titleAl         String
  excerpt         String
  excerptAl       String
  content         String
  contentAl       String
  featuredImage   String?
  author          String
  isPublished     Boolean           @default(false)
  publishedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // SEO
  metaTitle       String?
  metaTitleAl     String?
  metaDescription String?
  metaDescriptionAl String?
  
  // Relations
  tags            BlogPostTag[]
}

model News {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  titleAl         String
  content         String
  contentAl       String
  featuredImage   String?
  isPublished     Boolean           @default(false)
  publishedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Tutorial {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  titleAl         String
  description     String
  descriptionAl   String
  videoUrl        String?
  content         String
  contentAl       String
  category        String            // TutorialCategory as String
  difficulty      String            // Difficulty as String
  isPublished     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Review {
  id              String            @id @default(cuid())
  userId          String
  productId       String
  rating          Int
  title           String
  comment         String
  isVerified      Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  product         Product           @relation(fields: [productId], references: [id])
}

// Forum
model ForumCategory {
  id              String            @id @default(cuid())
  name            String
  nameAl          String
  description     String
  descriptionAl   String
  slug            String            @unique
  order           Int               @default(0)
  createdAt       DateTime          @default(now())
  
  // Relations
  posts           ForumPost[]
}

model ForumPost {
  id              String            @id @default(cuid())
  userId          String
  categoryId      String
  title           String
  content         String
  isPinned        Boolean           @default(false)
  isLocked        Boolean           @default(false)
  viewCount       Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  category        ForumCategory     @relation(fields: [categoryId], references: [id])
  comments        ForumComment[]
}

model ForumComment {
  id              String            @id @default(cuid())
  userId          String
  postId          String
  content         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
  post            ForumPost         @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Event {
  id              String            @id @default(cuid())
  title           String
  titleAl         String
  description     String
  descriptionAl   String
  startDate       DateTime
  endDate         DateTime?
  location        String?
  image           String?
  isPublished     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Service {
  id              String            @id @default(cuid())
  name            String
  nameAl          String
  description     String
  descriptionAl   String
  category        String            // ServiceCategory as String
  price           Float?
  priceType       String            @default("FIXED")
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// Billing
model Invoice {
  id              String            @id @default(cuid())
  invoiceNumber   String            @unique
  orderId         String?           @unique
  repairId        String?           @unique
  amount          Float
  dueDate         DateTime
  status          String            @default("DRAFT")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  order           Order?            @relation(fields: [orderId], references: [id])
  repair          Repair?           @relation(fields: [repairId], references: [id])
}

// Notifications
model Notification {
  id              String            @id @default(cuid())
  userId          String
  type            String            // NotificationType as String
  title           String
  message         String
  isRead          Boolean           @default(false)
  data            String?           // JSON as string for SQLite compatibility
  createdAt       DateTime          @default(now())
  
  // Relations
  user            User              @relation(fields: [userId], references: [id])
}

// Team
model TeamMember {
  id              String            @id @default(cuid())
  name            String
  nameAl          String
  position        String
  positionAl      String
  bio             String
  bioAl           String
  image           String?
  email           String?
  isActive        Boolean           @default(true)
  order           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// Analytics
model Analytics {
  id              String            @id @default(cuid())
  metric          String
  value           Float
  metadata        String?           // JSON as string for SQLite compatibility
  createdAt       DateTime          @default(now())
}

// Store Products
model GiftCard {
  id              String            @id @default(cuid())
  code            String            @unique
  type            String            // GiftCardType as String
  value           Float
  isRedeemed      Boolean           @default(false)
  redeemedBy      String?
  createdAt       DateTime          @default(now())
  redeemedAt      DateTime?
}

// Job Applications
model JobApplication {
  id              String            @id @default(cuid())
  name            String
  email           String
  phone           String?
  position        String
  resume          String?
  coverLetter     String
  status          String            @default("NEW")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}